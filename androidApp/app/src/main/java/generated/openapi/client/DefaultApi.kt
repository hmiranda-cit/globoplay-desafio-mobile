/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package generated.openapi.client

import com.squareup.moshi.Json
import generated.openapi.infrastructure.ApiClient
import generated.openapi.infrastructure.ApiResponse
import generated.openapi.infrastructure.ClientError
import generated.openapi.infrastructure.ClientException
import generated.openapi.infrastructure.MultiValueMap
import generated.openapi.infrastructure.RequestConfig
import generated.openapi.infrastructure.RequestMethod
import generated.openapi.infrastructure.ResponseType
import generated.openapi.infrastructure.ServerError
import generated.openapi.infrastructure.ServerException
import generated.openapi.infrastructure.Success
import generated.openapi.model.ConfigurationDetails200Response
import generated.openapi.model.DiscoverMovie200Response
import generated.openapi.model.DiscoverTv200Response
import generated.openapi.model.GenreTvList200Response
import okhttp3.Call
import okhttp3.HttpUrl
import java.io.IOException

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.themoviedb.org")
        }
    }

    /**
     * Details
     * Query the API configuration details.
     * @return ConfigurationDetails200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationDetails() : ConfigurationDetails200Response {
        val localVarResponse = configurationDetailsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConfigurationDetails200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Details
     * Query the API configuration details.
     * @return ApiResponse<ConfigurationDetails200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun configurationDetailsWithHttpInfo() : ApiResponse<ConfigurationDetails200Response?> {
        val localVariableConfig = configurationDetailsRequestConfig()

        return request<Unit, ConfigurationDetails200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation configurationDetails
     *
     * @return RequestConfig
     */
    fun configurationDetailsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/3/configuration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortBy
     */
     enum class SortByDiscoverMovie(val value: kotlin.String) {
         @Json(name = "original_title.asc") original_titlePeriodAsc("original_title.asc"),
         @Json(name = "original_title.desc") original_titlePeriodDesc("original_title.desc"),
         @Json(name = "popularity.asc") popularityPeriodAsc("popularity.asc"),
         @Json(name = "popularity.desc") popularityPeriodDesc("popularity.desc"),
         @Json(name = "revenue.asc") revenuePeriodAsc("revenue.asc"),
         @Json(name = "revenue.desc") revenuePeriodDesc("revenue.desc"),
         @Json(name = "primary_release_date.asc") primary_release_datePeriodAsc("primary_release_date.asc"),
         @Json(name = "title.asc") titlePeriodAsc("title.asc"),
         @Json(name = "title.desc") titlePeriodDesc("title.desc"),
         @Json(name = "primary_release_date.desc") primary_release_datePeriodDesc("primary_release_date.desc"),
         @Json(name = "vote_average.asc") vote_averagePeriodAsc("vote_average.asc"),
         @Json(name = "vote_average.desc") vote_averagePeriodDesc("vote_average.desc"),
         @Json(name = "vote_count.asc") vote_countPeriodAsc("vote_count.asc"),
         @Json(name = "vote_count.desc") vote_countPeriodDesc("vote_count.desc");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Movie
     * Find movies using over 30 filters and sort options.
     * @param certification use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationGte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationLte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationCountry use in conjunction with the &#x60;certification&#x60;, &#x60;certification.gte&#x60; and &#x60;certification.lte&#x60; filters (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeVideo  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param primaryReleaseYear  (optional)
     * @param primaryReleaseDateGte  (optional)
     * @param primaryReleaseDateLte  (optional)
     * @param region  (optional)
     * @param releaseDateGte  (optional)
     * @param releaseDateLte  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCast can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCrew can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withPeople can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withReleaseType possible values are: [1, 2, 3, 4, 5, 6] can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query, can be used in conjunction with &#x60;region&#x60; (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param year  (optional)
     * @return DiscoverMovie200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoverMovie(certification: kotlin.String? = null, certificationGte: kotlin.String? = null, certificationLte: kotlin.String? = null, certificationCountry: kotlin.String? = null, includeAdult: kotlin.Boolean? = false, includeVideo: kotlin.Boolean? = false, language: kotlin.String? = "en-US", page: kotlin.Int? = 1, primaryReleaseYear: kotlin.Int? = null, primaryReleaseDateGte: java.time.LocalDate? = null, primaryReleaseDateLte: java.time.LocalDate? = null, region: kotlin.String? = null, releaseDateGte: java.time.LocalDate? = null, releaseDateLte: java.time.LocalDate? = null, sortBy: SortByDiscoverMovie? = SortByDiscoverMovie.popularityPeriodDesc, voteAverageGte: kotlin.Float? = null, voteAverageLte: kotlin.Float? = null, voteCountGte: kotlin.Float? = null, voteCountLte: kotlin.Float? = null, watchRegion: kotlin.String? = null, withCast: kotlin.String? = null, withCompanies: kotlin.String? = null, withCrew: kotlin.String? = null, withGenres: kotlin.String? = null, withKeywords: kotlin.String? = null, withOriginCountry: kotlin.String? = null, withOriginalLanguage: kotlin.String? = null, withPeople: kotlin.String? = null, withReleaseType: kotlin.Int? = null, withRuntimeGte: kotlin.Int? = null, withRuntimeLte: kotlin.Int? = null, withWatchMonetizationTypes: kotlin.String? = null, withWatchProviders: kotlin.String? = null, withoutCompanies: kotlin.String? = null, withoutGenres: kotlin.String? = null, withoutKeywords: kotlin.String? = null, withoutWatchProviders: kotlin.String? = null, year: kotlin.Int? = null) : DiscoverMovie200Response {
        val localVarResponse = discoverMovieWithHttpInfo(certification = certification, certificationGte = certificationGte, certificationLte = certificationLte, certificationCountry = certificationCountry, includeAdult = includeAdult, includeVideo = includeVideo, language = language, page = page, primaryReleaseYear = primaryReleaseYear, primaryReleaseDateGte = primaryReleaseDateGte, primaryReleaseDateLte = primaryReleaseDateLte, region = region, releaseDateGte = releaseDateGte, releaseDateLte = releaseDateLte, sortBy = sortBy, voteAverageGte = voteAverageGte, voteAverageLte = voteAverageLte, voteCountGte = voteCountGte, voteCountLte = voteCountLte, watchRegion = watchRegion, withCast = withCast, withCompanies = withCompanies, withCrew = withCrew, withGenres = withGenres, withKeywords = withKeywords, withOriginCountry = withOriginCountry, withOriginalLanguage = withOriginalLanguage, withPeople = withPeople, withReleaseType = withReleaseType, withRuntimeGte = withRuntimeGte, withRuntimeLte = withRuntimeLte, withWatchMonetizationTypes = withWatchMonetizationTypes, withWatchProviders = withWatchProviders, withoutCompanies = withoutCompanies, withoutGenres = withoutGenres, withoutKeywords = withoutKeywords, withoutWatchProviders = withoutWatchProviders, year = year)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscoverMovie200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Movie
     * Find movies using over 30 filters and sort options.
     * @param certification use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationGte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationLte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationCountry use in conjunction with the &#x60;certification&#x60;, &#x60;certification.gte&#x60; and &#x60;certification.lte&#x60; filters (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeVideo  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param primaryReleaseYear  (optional)
     * @param primaryReleaseDateGte  (optional)
     * @param primaryReleaseDateLte  (optional)
     * @param region  (optional)
     * @param releaseDateGte  (optional)
     * @param releaseDateLte  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCast can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCrew can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withPeople can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withReleaseType possible values are: [1, 2, 3, 4, 5, 6] can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query, can be used in conjunction with &#x60;region&#x60; (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param year  (optional)
     * @return ApiResponse<DiscoverMovie200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoverMovieWithHttpInfo(certification: kotlin.String?, certificationGte: kotlin.String?, certificationLte: kotlin.String?, certificationCountry: kotlin.String?, includeAdult: kotlin.Boolean?, includeVideo: kotlin.Boolean?, language: kotlin.String?, page: kotlin.Int?, primaryReleaseYear: kotlin.Int?, primaryReleaseDateGte: java.time.LocalDate?, primaryReleaseDateLte: java.time.LocalDate?, region: kotlin.String?, releaseDateGte: java.time.LocalDate?, releaseDateLte: java.time.LocalDate?, sortBy: SortByDiscoverMovie?, voteAverageGte: kotlin.Float?, voteAverageLte: kotlin.Float?, voteCountGte: kotlin.Float?, voteCountLte: kotlin.Float?, watchRegion: kotlin.String?, withCast: kotlin.String?, withCompanies: kotlin.String?, withCrew: kotlin.String?, withGenres: kotlin.String?, withKeywords: kotlin.String?, withOriginCountry: kotlin.String?, withOriginalLanguage: kotlin.String?, withPeople: kotlin.String?, withReleaseType: kotlin.Int?, withRuntimeGte: kotlin.Int?, withRuntimeLte: kotlin.Int?, withWatchMonetizationTypes: kotlin.String?, withWatchProviders: kotlin.String?, withoutCompanies: kotlin.String?, withoutGenres: kotlin.String?, withoutKeywords: kotlin.String?, withoutWatchProviders: kotlin.String?, year: kotlin.Int?) : ApiResponse<DiscoverMovie200Response?> {
        val localVariableConfig = discoverMovieRequestConfig(certification = certification, certificationGte = certificationGte, certificationLte = certificationLte, certificationCountry = certificationCountry, includeAdult = includeAdult, includeVideo = includeVideo, language = language, page = page, primaryReleaseYear = primaryReleaseYear, primaryReleaseDateGte = primaryReleaseDateGte, primaryReleaseDateLte = primaryReleaseDateLte, region = region, releaseDateGte = releaseDateGte, releaseDateLte = releaseDateLte, sortBy = sortBy, voteAverageGte = voteAverageGte, voteAverageLte = voteAverageLte, voteCountGte = voteCountGte, voteCountLte = voteCountLte, watchRegion = watchRegion, withCast = withCast, withCompanies = withCompanies, withCrew = withCrew, withGenres = withGenres, withKeywords = withKeywords, withOriginCountry = withOriginCountry, withOriginalLanguage = withOriginalLanguage, withPeople = withPeople, withReleaseType = withReleaseType, withRuntimeGte = withRuntimeGte, withRuntimeLte = withRuntimeLte, withWatchMonetizationTypes = withWatchMonetizationTypes, withWatchProviders = withWatchProviders, withoutCompanies = withoutCompanies, withoutGenres = withoutGenres, withoutKeywords = withoutKeywords, withoutWatchProviders = withoutWatchProviders, year = year)

        return request<Unit, DiscoverMovie200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoverMovie
     *
     * @param certification use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationGte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationLte use in conjunction with &#x60;region&#x60; (optional)
     * @param certificationCountry use in conjunction with the &#x60;certification&#x60;, &#x60;certification.gte&#x60; and &#x60;certification.lte&#x60; filters (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeVideo  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param primaryReleaseYear  (optional)
     * @param primaryReleaseDateGte  (optional)
     * @param primaryReleaseDateLte  (optional)
     * @param region  (optional)
     * @param releaseDateGte  (optional)
     * @param releaseDateLte  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCast can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withCrew can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withPeople can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withReleaseType possible values are: [1, 2, 3, 4, 5, 6] can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query, can be used in conjunction with &#x60;region&#x60; (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param year  (optional)
     * @return RequestConfig
     */
    fun discoverMovieRequestConfig(certification: kotlin.String?, certificationGte: kotlin.String?, certificationLte: kotlin.String?, certificationCountry: kotlin.String?, includeAdult: kotlin.Boolean?, includeVideo: kotlin.Boolean?, language: kotlin.String?, page: kotlin.Int?, primaryReleaseYear: kotlin.Int?, primaryReleaseDateGte: java.time.LocalDate?, primaryReleaseDateLte: java.time.LocalDate?, region: kotlin.String?, releaseDateGte: java.time.LocalDate?, releaseDateLte: java.time.LocalDate?, sortBy: SortByDiscoverMovie?, voteAverageGte: kotlin.Float?, voteAverageLte: kotlin.Float?, voteCountGte: kotlin.Float?, voteCountLte: kotlin.Float?, watchRegion: kotlin.String?, withCast: kotlin.String?, withCompanies: kotlin.String?, withCrew: kotlin.String?, withGenres: kotlin.String?, withKeywords: kotlin.String?, withOriginCountry: kotlin.String?, withOriginalLanguage: kotlin.String?, withPeople: kotlin.String?, withReleaseType: kotlin.Int?, withRuntimeGte: kotlin.Int?, withRuntimeLte: kotlin.Int?, withWatchMonetizationTypes: kotlin.String?, withWatchProviders: kotlin.String?, withoutCompanies: kotlin.String?, withoutGenres: kotlin.String?, withoutKeywords: kotlin.String?, withoutWatchProviders: kotlin.String?, year: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (certification != null) {
                    put("certification", listOf(certification.toString()))
                }
                if (certificationGte != null) {
                    put("certification.gte", listOf(certificationGte.toString()))
                }
                if (certificationLte != null) {
                    put("certification.lte", listOf(certificationLte.toString()))
                }
                if (certificationCountry != null) {
                    put("certification_country", listOf(certificationCountry.toString()))
                }
                if (includeAdult != null) {
                    put("include_adult", listOf(includeAdult.toString()))
                }
                if (includeVideo != null) {
                    put("include_video", listOf(includeVideo.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (primaryReleaseYear != null) {
                    put("primary_release_year", listOf(primaryReleaseYear.toString()))
                }
                if (primaryReleaseDateGte != null) {
                    put("primary_release_date.gte", listOf(parseDateToQueryString(primaryReleaseDateGte)))
                }
                if (primaryReleaseDateLte != null) {
                    put("primary_release_date.lte", listOf(parseDateToQueryString(primaryReleaseDateLte)))
                }
                if (region != null) {
                    put("region", listOf(region.toString()))
                }
                if (releaseDateGte != null) {
                    put("release_date.gte", listOf(parseDateToQueryString(releaseDateGte)))
                }
                if (releaseDateLte != null) {
                    put("release_date.lte", listOf(parseDateToQueryString(releaseDateLte)))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.value))
                }
                if (voteAverageGte != null) {
                    put("vote_average.gte", listOf(voteAverageGte.toString()))
                }
                if (voteAverageLte != null) {
                    put("vote_average.lte", listOf(voteAverageLte.toString()))
                }
                if (voteCountGte != null) {
                    put("vote_count.gte", listOf(voteCountGte.toString()))
                }
                if (voteCountLte != null) {
                    put("vote_count.lte", listOf(voteCountLte.toString()))
                }
                if (watchRegion != null) {
                    put("watch_region", listOf(watchRegion.toString()))
                }
                if (withCast != null) {
                    put("with_cast", listOf(withCast.toString()))
                }
                if (withCompanies != null) {
                    put("with_companies", listOf(withCompanies.toString()))
                }
                if (withCrew != null) {
                    put("with_crew", listOf(withCrew.toString()))
                }
                if (withGenres != null) {
                    put("with_genres", listOf(withGenres.toString()))
                }
                if (withKeywords != null) {
                    put("with_keywords", listOf(withKeywords.toString()))
                }
                if (withOriginCountry != null) {
                    put("with_origin_country", listOf(withOriginCountry.toString()))
                }
                if (withOriginalLanguage != null) {
                    put("with_original_language", listOf(withOriginalLanguage.toString()))
                }
                if (withPeople != null) {
                    put("with_people", listOf(withPeople.toString()))
                }
                if (withReleaseType != null) {
                    put("with_release_type", listOf(withReleaseType.toString()))
                }
                if (withRuntimeGte != null) {
                    put("with_runtime.gte", listOf(withRuntimeGte.toString()))
                }
                if (withRuntimeLte != null) {
                    put("with_runtime.lte", listOf(withRuntimeLte.toString()))
                }
                if (withWatchMonetizationTypes != null) {
                    put("with_watch_monetization_types", listOf(withWatchMonetizationTypes.toString()))
                }
                if (withWatchProviders != null) {
                    put("with_watch_providers", listOf(withWatchProviders.toString()))
                }
                if (withoutCompanies != null) {
                    put("without_companies", listOf(withoutCompanies.toString()))
                }
                if (withoutGenres != null) {
                    put("without_genres", listOf(withoutGenres.toString()))
                }
                if (withoutKeywords != null) {
                    put("without_keywords", listOf(withoutKeywords.toString()))
                }
                if (withoutWatchProviders != null) {
                    put("without_watch_providers", listOf(withoutWatchProviders.toString()))
                }
                if (year != null) {
                    put("year", listOf(year.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/3/discover/movie",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortBy
     */
     enum class SortByDiscoverTv(val value: kotlin.String) {
         @Json(name = "first_air_date.asc") first_air_datePeriodAsc("first_air_date.asc"),
         @Json(name = "first_air_date.desc") first_air_datePeriodDesc("first_air_date.desc"),
         @Json(name = "name.asc") namePeriodAsc("name.asc"),
         @Json(name = "name.desc") namePeriodDesc("name.desc"),
         @Json(name = "original_name.asc") original_namePeriodAsc("original_name.asc"),
         @Json(name = "original_name.desc") original_namePeriodDesc("original_name.desc"),
         @Json(name = "popularity.asc") popularityPeriodAsc("popularity.asc"),
         @Json(name = "popularity.desc") popularityPeriodDesc("popularity.desc"),
         @Json(name = "vote_average.asc") vote_averagePeriodAsc("vote_average.asc"),
         @Json(name = "vote_average.desc") vote_averagePeriodDesc("vote_average.desc"),
         @Json(name = "vote_count.asc") vote_countPeriodAsc("vote_count.asc"),
         @Json(name = "vote_count.desc") vote_countPeriodDesc("vote_count.desc");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * TV
     * Find TV shows using over 30 filters and sort options.
     * @param airDateGte  (optional)
     * @param airDateLte  (optional)
     * @param firstAirDateYear  (optional)
     * @param firstAirDateGte  (optional)
     * @param firstAirDateLte  (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeNullFirstAirDates  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param screenedTheatrically  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param timezone  (optional)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withNetworks  (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withStatus possible values are: [0, 1, 2, 3, 4, 5], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param withType possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @return DiscoverTv200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoverTv(airDateGte: java.time.LocalDate? = null, airDateLte: java.time.LocalDate? = null, firstAirDateYear: kotlin.Int? = null, firstAirDateGte: java.time.LocalDate? = null, firstAirDateLte: java.time.LocalDate? = null, includeAdult: kotlin.Boolean? = false, includeNullFirstAirDates: kotlin.Boolean? = false, language: kotlin.String? = "en-US", page: kotlin.Int? = 1, screenedTheatrically: kotlin.Boolean? = null, sortBy: SortByDiscoverTv? = SortByDiscoverTv.popularityPeriodDesc, timezone: kotlin.String? = null, voteAverageGte: kotlin.Float? = null, voteAverageLte: kotlin.Float? = null, voteCountGte: kotlin.Float? = null, voteCountLte: kotlin.Float? = null, watchRegion: kotlin.String? = null, withCompanies: kotlin.String? = null, withGenres: kotlin.String? = null, withKeywords: kotlin.String? = null, withNetworks: kotlin.Int? = null, withOriginCountry: kotlin.String? = null, withOriginalLanguage: kotlin.String? = null, withRuntimeGte: kotlin.Int? = null, withRuntimeLte: kotlin.Int? = null, withStatus: kotlin.String? = null, withWatchMonetizationTypes: kotlin.String? = null, withWatchProviders: kotlin.String? = null, withoutCompanies: kotlin.String? = null, withoutGenres: kotlin.String? = null, withoutKeywords: kotlin.String? = null, withoutWatchProviders: kotlin.String? = null, withType: kotlin.String? = null) : DiscoverTv200Response {
        val localVarResponse = discoverTvWithHttpInfo(airDateGte = airDateGte, airDateLte = airDateLte, firstAirDateYear = firstAirDateYear, firstAirDateGte = firstAirDateGte, firstAirDateLte = firstAirDateLte, includeAdult = includeAdult, includeNullFirstAirDates = includeNullFirstAirDates, language = language, page = page, screenedTheatrically = screenedTheatrically, sortBy = sortBy, timezone = timezone, voteAverageGte = voteAverageGte, voteAverageLte = voteAverageLte, voteCountGte = voteCountGte, voteCountLte = voteCountLte, watchRegion = watchRegion, withCompanies = withCompanies, withGenres = withGenres, withKeywords = withKeywords, withNetworks = withNetworks, withOriginCountry = withOriginCountry, withOriginalLanguage = withOriginalLanguage, withRuntimeGte = withRuntimeGte, withRuntimeLte = withRuntimeLte, withStatus = withStatus, withWatchMonetizationTypes = withWatchMonetizationTypes, withWatchProviders = withWatchProviders, withoutCompanies = withoutCompanies, withoutGenres = withoutGenres, withoutKeywords = withoutKeywords, withoutWatchProviders = withoutWatchProviders, withType = withType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscoverTv200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * TV
     * Find TV shows using over 30 filters and sort options.
     * @param airDateGte  (optional)
     * @param airDateLte  (optional)
     * @param firstAirDateYear  (optional)
     * @param firstAirDateGte  (optional)
     * @param firstAirDateLte  (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeNullFirstAirDates  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param screenedTheatrically  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param timezone  (optional)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withNetworks  (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withStatus possible values are: [0, 1, 2, 3, 4, 5], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param withType possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @return ApiResponse<DiscoverTv200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoverTvWithHttpInfo(airDateGte: java.time.LocalDate?, airDateLte: java.time.LocalDate?, firstAirDateYear: kotlin.Int?, firstAirDateGte: java.time.LocalDate?, firstAirDateLte: java.time.LocalDate?, includeAdult: kotlin.Boolean?, includeNullFirstAirDates: kotlin.Boolean?, language: kotlin.String?, page: kotlin.Int?, screenedTheatrically: kotlin.Boolean?, sortBy: SortByDiscoverTv?, timezone: kotlin.String?, voteAverageGte: kotlin.Float?, voteAverageLte: kotlin.Float?, voteCountGte: kotlin.Float?, voteCountLte: kotlin.Float?, watchRegion: kotlin.String?, withCompanies: kotlin.String?, withGenres: kotlin.String?, withKeywords: kotlin.String?, withNetworks: kotlin.Int?, withOriginCountry: kotlin.String?, withOriginalLanguage: kotlin.String?, withRuntimeGte: kotlin.Int?, withRuntimeLte: kotlin.Int?, withStatus: kotlin.String?, withWatchMonetizationTypes: kotlin.String?, withWatchProviders: kotlin.String?, withoutCompanies: kotlin.String?, withoutGenres: kotlin.String?, withoutKeywords: kotlin.String?, withoutWatchProviders: kotlin.String?, withType: kotlin.String?) : ApiResponse<DiscoverTv200Response?> {
        val localVariableConfig = discoverTvRequestConfig(airDateGte = airDateGte, airDateLte = airDateLte, firstAirDateYear = firstAirDateYear, firstAirDateGte = firstAirDateGte, firstAirDateLte = firstAirDateLte, includeAdult = includeAdult, includeNullFirstAirDates = includeNullFirstAirDates, language = language, page = page, screenedTheatrically = screenedTheatrically, sortBy = sortBy, timezone = timezone, voteAverageGte = voteAverageGte, voteAverageLte = voteAverageLte, voteCountGte = voteCountGte, voteCountLte = voteCountLte, watchRegion = watchRegion, withCompanies = withCompanies, withGenres = withGenres, withKeywords = withKeywords, withNetworks = withNetworks, withOriginCountry = withOriginCountry, withOriginalLanguage = withOriginalLanguage, withRuntimeGte = withRuntimeGte, withRuntimeLte = withRuntimeLte, withStatus = withStatus, withWatchMonetizationTypes = withWatchMonetizationTypes, withWatchProviders = withWatchProviders, withoutCompanies = withoutCompanies, withoutGenres = withoutGenres, withoutKeywords = withoutKeywords, withoutWatchProviders = withoutWatchProviders, withType = withType)

        return request<Unit, DiscoverTv200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoverTv
     *
     * @param airDateGte  (optional)
     * @param airDateLte  (optional)
     * @param firstAirDateYear  (optional)
     * @param firstAirDateGte  (optional)
     * @param firstAirDateLte  (optional)
     * @param includeAdult  (optional, default to false)
     * @param includeNullFirstAirDates  (optional, default to false)
     * @param language  (optional, default to "en-US")
     * @param page  (optional, default to 1)
     * @param screenedTheatrically  (optional)
     * @param sortBy  (optional, default to popularity.desc)
     * @param timezone  (optional)
     * @param voteAverageGte  (optional)
     * @param voteAverageLte  (optional)
     * @param voteCountGte  (optional)
     * @param voteCountLte  (optional)
     * @param watchRegion use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60; (optional)
     * @param withCompanies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withGenres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withKeywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withNetworks  (optional)
     * @param withOriginCountry  (optional)
     * @param withOriginalLanguage  (optional)
     * @param withRuntimeGte  (optional)
     * @param withRuntimeLte  (optional)
     * @param withStatus possible values are: [0, 1, 2, 3, 4, 5], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withWatchProviders use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @param withoutCompanies  (optional)
     * @param withoutGenres  (optional)
     * @param withoutKeywords  (optional)
     * @param withoutWatchProviders  (optional)
     * @param withType possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query (optional)
     * @return RequestConfig
     */
    fun discoverTvRequestConfig(airDateGte: java.time.LocalDate?, airDateLte: java.time.LocalDate?, firstAirDateYear: kotlin.Int?, firstAirDateGte: java.time.LocalDate?, firstAirDateLte: java.time.LocalDate?, includeAdult: kotlin.Boolean?, includeNullFirstAirDates: kotlin.Boolean?, language: kotlin.String?, page: kotlin.Int?, screenedTheatrically: kotlin.Boolean?, sortBy: SortByDiscoverTv?, timezone: kotlin.String?, voteAverageGte: kotlin.Float?, voteAverageLte: kotlin.Float?, voteCountGte: kotlin.Float?, voteCountLte: kotlin.Float?, watchRegion: kotlin.String?, withCompanies: kotlin.String?, withGenres: kotlin.String?, withKeywords: kotlin.String?, withNetworks: kotlin.Int?, withOriginCountry: kotlin.String?, withOriginalLanguage: kotlin.String?, withRuntimeGte: kotlin.Int?, withRuntimeLte: kotlin.Int?, withStatus: kotlin.String?, withWatchMonetizationTypes: kotlin.String?, withWatchProviders: kotlin.String?, withoutCompanies: kotlin.String?, withoutGenres: kotlin.String?, withoutKeywords: kotlin.String?, withoutWatchProviders: kotlin.String?, withType: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (airDateGte != null) {
                    put("air_date.gte", listOf(parseDateToQueryString(airDateGte)))
                }
                if (airDateLte != null) {
                    put("air_date.lte", listOf(parseDateToQueryString(airDateLte)))
                }
                if (firstAirDateYear != null) {
                    put("first_air_date_year", listOf(firstAirDateYear.toString()))
                }
                if (firstAirDateGte != null) {
                    put("first_air_date.gte", listOf(parseDateToQueryString(firstAirDateGte)))
                }
                if (firstAirDateLte != null) {
                    put("first_air_date.lte", listOf(parseDateToQueryString(firstAirDateLte)))
                }
                if (includeAdult != null) {
                    put("include_adult", listOf(includeAdult.toString()))
                }
                if (includeNullFirstAirDates != null) {
                    put("include_null_first_air_dates", listOf(includeNullFirstAirDates.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (screenedTheatrically != null) {
                    put("screened_theatrically", listOf(screenedTheatrically.toString()))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.value))
                }
                if (timezone != null) {
                    put("timezone", listOf(timezone.toString()))
                }
                if (voteAverageGte != null) {
                    put("vote_average.gte", listOf(voteAverageGte.toString()))
                }
                if (voteAverageLte != null) {
                    put("vote_average.lte", listOf(voteAverageLte.toString()))
                }
                if (voteCountGte != null) {
                    put("vote_count.gte", listOf(voteCountGte.toString()))
                }
                if (voteCountLte != null) {
                    put("vote_count.lte", listOf(voteCountLte.toString()))
                }
                if (watchRegion != null) {
                    put("watch_region", listOf(watchRegion.toString()))
                }
                if (withCompanies != null) {
                    put("with_companies", listOf(withCompanies.toString()))
                }
                if (withGenres != null) {
                    put("with_genres", listOf(withGenres.toString()))
                }
                if (withKeywords != null) {
                    put("with_keywords", listOf(withKeywords.toString()))
                }
                if (withNetworks != null) {
                    put("with_networks", listOf(withNetworks.toString()))
                }
                if (withOriginCountry != null) {
                    put("with_origin_country", listOf(withOriginCountry.toString()))
                }
                if (withOriginalLanguage != null) {
                    put("with_original_language", listOf(withOriginalLanguage.toString()))
                }
                if (withRuntimeGte != null) {
                    put("with_runtime.gte", listOf(withRuntimeGte.toString()))
                }
                if (withRuntimeLte != null) {
                    put("with_runtime.lte", listOf(withRuntimeLte.toString()))
                }
                if (withStatus != null) {
                    put("with_status", listOf(withStatus.toString()))
                }
                if (withWatchMonetizationTypes != null) {
                    put("with_watch_monetization_types", listOf(withWatchMonetizationTypes.toString()))
                }
                if (withWatchProviders != null) {
                    put("with_watch_providers", listOf(withWatchProviders.toString()))
                }
                if (withoutCompanies != null) {
                    put("without_companies", listOf(withoutCompanies.toString()))
                }
                if (withoutGenres != null) {
                    put("without_genres", listOf(withoutGenres.toString()))
                }
                if (withoutKeywords != null) {
                    put("without_keywords", listOf(withoutKeywords.toString()))
                }
                if (withoutWatchProviders != null) {
                    put("without_watch_providers", listOf(withoutWatchProviders.toString()))
                }
                if (withType != null) {
                    put("with_type", listOf(withType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/3/discover/tv",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * TV List
     * Get the list of official genres for TV shows.
     * @param language  (optional, default to "en")
     * @return GenreTvList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun genreTvList(language: kotlin.String? = "en") : GenreTvList200Response {
        val localVarResponse = genreTvListWithHttpInfo(language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenreTvList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * TV List
     * Get the list of official genres for TV shows.
     * @param language  (optional, default to "en")
     * @return ApiResponse<GenreTvList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun genreTvListWithHttpInfo(language: kotlin.String?) : ApiResponse<GenreTvList200Response?> {
        val localVariableConfig = genreTvListRequestConfig(language = language)

        return request<Unit, GenreTvList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation genreTvList
     *
     * @param language  (optional, default to "en")
     * @return RequestConfig
     */
    fun genreTvListRequestConfig(language: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/3/genre/tv/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
